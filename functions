kill_grep() {
    # Usage: kill_grep.sh MY_APP_NAME
    # Will kill anything that has MY_APP_NAME in their name
    ps aux | grep $1 | grep -v -e "grep.*$1" | grep `whoami` | grep -v "$0 $1" |  awk '{print $2}' | xargs kill -9
}

md5dir() {
    find $1/ -type f -exec md5sum {} + | awk '{print $1}' | sort | md5sum
}

gocd () {
        local targetlist=$(tree --noreport -f -L 5 -d -i $GOPATH/src/ )
        if [[ -z "$targetlist" ]]
        then
                echo "Could not find any packages"
                return
        fi
        if [[ "${@:1}" ]]
        then
                local query=${@:1}
                cd $(echo $targetlist | fzf --preview 'ls {}' --query $query)
                return
        else
                cd $(echo $targetlist | fzf --preview 'ls {}')
        fi
}

goverall() {
    echo "mode: set" > coverage.out
    for folder in $(find ./* -type d | grep -v vendor) .;
    do
        if ls $folder/*.go &> /dev/null;
        then
            go test -coverprofile=profile.out $folder
            if [ -f profile.out ]
            then
                cat profile.out | grep -v "mode: set" >> coverage.out
            fi
        fi
    done
    rm -rf ./profile.out
    go tool cover -html=coverage.out
    rm -rf ./coverage.out
}

ginkgo_cover () {
    ginkgo -r -cover

    echo "mode: set" > coverage.out
    for file in $(find . -name "*\.coverprofile" | grep -v vendor)
    do
        cat $file | grep -v "mode: " >> coverage.out
    done
    rm -rf ./$file
    go tool cover -html=coverage.out
    rm -rf ./coverage.out
}

reset_iptables() {

    sudo iptables -P INPUT   ACCEPT
    sudo iptables -P OUTPUT  ACCEPT
    sudo iptables -P FORWARD ACCEPT
    sudo iptables -F
    sudo iptables -X

    for table in filter nat mangle; do
        sudo iptables -t $table -F
        sudo iptables -t $table -X
        sudo iptables -t $table -Z
    done
}

dcleanup(){
	docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

del_stopped(){
	local name=$1
	local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm $name
	fi
}

docker-gimp(){
	del_stopped gimp
	xhost local:arsham

	docker run -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		-v $HOME/Pictures:/root/Pictures \
		-v $HOME/.gtkrc:/root/.gtkrc \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--name gimp \
		jess/gimp
}

tor-browser() {
	del_stopped tor-browser
	xhost local:arsham


	docker run -it \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=unix$DISPLAY \
		-v /dev/snd:/dev/snd --privileged \
		--name tor-browser \
		jess/tor-browser
}

# killing a process with fzf
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

# commit browser
gitbrowser() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# removing files with fzf
frm () {
    local filename
    filename=$(ls -lha | fzf -m | tr -s " " | cut -d " " -f 8-)
    if [ "x$filename" != "x" ]
    then
        echo "$filename" | xargs -d \\n rm
    fi
}

# man pages
fman() {
    apropos '' | fzf --preview-window=right:70% --height=100% --preview 'echo {} | cut -f 1 -d " " | xargs man' | cut -f 1 -d " "
}
